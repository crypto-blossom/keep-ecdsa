// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/signer.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ThresholdSigner struct {
	GroupInfo    *ThresholdSigner_GroupInfo `protobuf:"bytes,1,opt,name=groupInfo" json:"groupInfo,omitempty"`
	ThresholdKey []byte                     `protobuf:"bytes,2,opt,name=thresholdKey,proto3" json:"thresholdKey,omitempty"`
}

func (m *ThresholdSigner) Reset()                    { *m = ThresholdSigner{} }
func (*ThresholdSigner) ProtoMessage()               {}
func (*ThresholdSigner) Descriptor() ([]byte, []int) { return fileDescriptorSigner, []int{0} }

func (m *ThresholdSigner) GetGroupInfo() *ThresholdSigner_GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *ThresholdSigner) GetThresholdKey() []byte {
	if m != nil {
		return m.ThresholdKey
	}
	return nil
}

type ThresholdSigner_GroupInfo struct {
	GroupID            string   `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	MemberID           []byte   `protobuf:"bytes,2,opt,name=memberID,proto3" json:"memberID,omitempty"`
	GroupMemberIDs     [][]byte `protobuf:"bytes,3,rep,name=groupMemberIDs" json:"groupMemberIDs,omitempty"`
	DishonestThreshold int32    `protobuf:"varint,4,opt,name=dishonestThreshold,proto3" json:"dishonestThreshold,omitempty"`
}

func (m *ThresholdSigner_GroupInfo) Reset()      { *m = ThresholdSigner_GroupInfo{} }
func (*ThresholdSigner_GroupInfo) ProtoMessage() {}
func (*ThresholdSigner_GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorSigner, []int{0, 0}
}

func (m *ThresholdSigner_GroupInfo) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *ThresholdSigner_GroupInfo) GetMemberID() []byte {
	if m != nil {
		return m.MemberID
	}
	return nil
}

func (m *ThresholdSigner_GroupInfo) GetGroupMemberIDs() [][]byte {
	if m != nil {
		return m.GroupMemberIDs
	}
	return nil
}

func (m *ThresholdSigner_GroupInfo) GetDishonestThreshold() int32 {
	if m != nil {
		return m.DishonestThreshold
	}
	return 0
}

type LocalPartySaveData struct {
	LocalPreParams *LocalPartySaveData_LocalPreParams `protobuf:"bytes,1,opt,name=localPreParams" json:"localPreParams,omitempty"`
	LocalSecrets   *LocalPartySaveData_LocalSecrets   `protobuf:"bytes,2,opt,name=localSecrets" json:"localSecrets,omitempty"`
	Ks             [][]byte                           `protobuf:"bytes,3,rep,name=ks" json:"ks,omitempty"`
	NTildej        [][]byte                           `protobuf:"bytes,4,rep,name=nTildej" json:"nTildej,omitempty"`
	H1J            [][]byte                           `protobuf:"bytes,5,rep,name=h1j" json:"h1j,omitempty"`
	H2J            [][]byte                           `protobuf:"bytes,6,rep,name=h2j" json:"h2j,omitempty"`
	BigXj          []*LocalPartySaveData_ECPoint      `protobuf:"bytes,7,rep,name=bigXj" json:"bigXj,omitempty"`
	PaillierPKs    [][]byte                           `protobuf:"bytes,8,rep,name=paillierPKs" json:"paillierPKs,omitempty"`
	EcdsaPub       *LocalPartySaveData_ECPoint        `protobuf:"bytes,9,opt,name=ecdsaPub" json:"ecdsaPub,omitempty"`
}

func (m *LocalPartySaveData) Reset()                    { *m = LocalPartySaveData{} }
func (*LocalPartySaveData) ProtoMessage()               {}
func (*LocalPartySaveData) Descriptor() ([]byte, []int) { return fileDescriptorSigner, []int{1} }

func (m *LocalPartySaveData) GetLocalPreParams() *LocalPartySaveData_LocalPreParams {
	if m != nil {
		return m.LocalPreParams
	}
	return nil
}

func (m *LocalPartySaveData) GetLocalSecrets() *LocalPartySaveData_LocalSecrets {
	if m != nil {
		return m.LocalSecrets
	}
	return nil
}

func (m *LocalPartySaveData) GetKs() [][]byte {
	if m != nil {
		return m.Ks
	}
	return nil
}

func (m *LocalPartySaveData) GetNTildej() [][]byte {
	if m != nil {
		return m.NTildej
	}
	return nil
}

func (m *LocalPartySaveData) GetH1J() [][]byte {
	if m != nil {
		return m.H1J
	}
	return nil
}

func (m *LocalPartySaveData) GetH2J() [][]byte {
	if m != nil {
		return m.H2J
	}
	return nil
}

func (m *LocalPartySaveData) GetBigXj() []*LocalPartySaveData_ECPoint {
	if m != nil {
		return m.BigXj
	}
	return nil
}

func (m *LocalPartySaveData) GetPaillierPKs() [][]byte {
	if m != nil {
		return m.PaillierPKs
	}
	return nil
}

func (m *LocalPartySaveData) GetEcdsaPub() *LocalPartySaveData_ECPoint {
	if m != nil {
		return m.EcdsaPub
	}
	return nil
}

type LocalPartySaveData_LocalPreParams struct {
	PaillierSK *LocalPartySaveData_LocalPreParams_PrivateKey `protobuf:"bytes,1,opt,name=paillierSK" json:"paillierSK,omitempty"`
	NTilde     []byte                                        `protobuf:"bytes,2,opt,name=nTilde,proto3" json:"nTilde,omitempty"`
	H1I        []byte                                        `protobuf:"bytes,3,opt,name=h1i,proto3" json:"h1i,omitempty"`
	H2I        []byte                                        `protobuf:"bytes,4,opt,name=h2i,proto3" json:"h2i,omitempty"`
	Alpha      []byte                                        `protobuf:"bytes,5,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Beta       []byte                                        `protobuf:"bytes,6,opt,name=beta,proto3" json:"beta,omitempty"`
	P          []byte                                        `protobuf:"bytes,7,opt,name=p,proto3" json:"p,omitempty"`
	Q          []byte                                        `protobuf:"bytes,8,opt,name=q,proto3" json:"q,omitempty"`
}

func (m *LocalPartySaveData_LocalPreParams) Reset()      { *m = LocalPartySaveData_LocalPreParams{} }
func (*LocalPartySaveData_LocalPreParams) ProtoMessage() {}
func (*LocalPartySaveData_LocalPreParams) Descriptor() ([]byte, []int) {
	return fileDescriptorSigner, []int{1, 0}
}

func (m *LocalPartySaveData_LocalPreParams) GetPaillierSK() *LocalPartySaveData_LocalPreParams_PrivateKey {
	if m != nil {
		return m.PaillierSK
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetNTilde() []byte {
	if m != nil {
		return m.NTilde
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetH1I() []byte {
	if m != nil {
		return m.H1I
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetH2I() []byte {
	if m != nil {
		return m.H2I
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetAlpha() []byte {
	if m != nil {
		return m.Alpha
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetBeta() []byte {
	if m != nil {
		return m.Beta
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

type LocalPartySaveData_LocalPreParams_PrivateKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	LambdaN   []byte `protobuf:"bytes,2,opt,name=lambdaN,proto3" json:"lambdaN,omitempty"`
	PhiN      []byte `protobuf:"bytes,3,opt,name=phiN,proto3" json:"phiN,omitempty"`
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) Reset() {
	*m = LocalPartySaveData_LocalPreParams_PrivateKey{}
}
func (*LocalPartySaveData_LocalPreParams_PrivateKey) ProtoMessage() {}
func (*LocalPartySaveData_LocalPreParams_PrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptorSigner, []int{1, 0, 0}
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) GetLambdaN() []byte {
	if m != nil {
		return m.LambdaN
	}
	return nil
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) GetPhiN() []byte {
	if m != nil {
		return m.PhiN
	}
	return nil
}

type LocalPartySaveData_LocalSecrets struct {
	Xi      []byte `protobuf:"bytes,1,opt,name=xi,proto3" json:"xi,omitempty"`
	ShareID []byte `protobuf:"bytes,2,opt,name=shareID,proto3" json:"shareID,omitempty"`
}

func (m *LocalPartySaveData_LocalSecrets) Reset()      { *m = LocalPartySaveData_LocalSecrets{} }
func (*LocalPartySaveData_LocalSecrets) ProtoMessage() {}
func (*LocalPartySaveData_LocalSecrets) Descriptor() ([]byte, []int) {
	return fileDescriptorSigner, []int{1, 1}
}

func (m *LocalPartySaveData_LocalSecrets) GetXi() []byte {
	if m != nil {
		return m.Xi
	}
	return nil
}

func (m *LocalPartySaveData_LocalSecrets) GetShareID() []byte {
	if m != nil {
		return m.ShareID
	}
	return nil
}

type LocalPartySaveData_ECPoint struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *LocalPartySaveData_ECPoint) Reset()      { *m = LocalPartySaveData_ECPoint{} }
func (*LocalPartySaveData_ECPoint) ProtoMessage() {}
func (*LocalPartySaveData_ECPoint) Descriptor() ([]byte, []int) {
	return fileDescriptorSigner, []int{1, 2}
}

func (m *LocalPartySaveData_ECPoint) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *LocalPartySaveData_ECPoint) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*ThresholdSigner)(nil), "tss.ThresholdSigner")
	proto.RegisterType((*ThresholdSigner_GroupInfo)(nil), "tss.ThresholdSigner.GroupInfo")
	proto.RegisterType((*LocalPartySaveData)(nil), "tss.LocalPartySaveData")
	proto.RegisterType((*LocalPartySaveData_LocalPreParams)(nil), "tss.LocalPartySaveData.LocalPreParams")
	proto.RegisterType((*LocalPartySaveData_LocalPreParams_PrivateKey)(nil), "tss.LocalPartySaveData.LocalPreParams.PrivateKey")
	proto.RegisterType((*LocalPartySaveData_LocalSecrets)(nil), "tss.LocalPartySaveData.LocalSecrets")
	proto.RegisterType((*LocalPartySaveData_ECPoint)(nil), "tss.LocalPartySaveData.ECPoint")
}
func (this *ThresholdSigner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThresholdSigner)
	if !ok {
		that2, ok := that.(ThresholdSigner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupInfo.Equal(that1.GroupInfo) {
		return false
	}
	if !bytes.Equal(this.ThresholdKey, that1.ThresholdKey) {
		return false
	}
	return true
}
func (this *ThresholdSigner_GroupInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThresholdSigner_GroupInfo)
	if !ok {
		that2, ok := that.(ThresholdSigner_GroupInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupID != that1.GroupID {
		return false
	}
	if !bytes.Equal(this.MemberID, that1.MemberID) {
		return false
	}
	if len(this.GroupMemberIDs) != len(that1.GroupMemberIDs) {
		return false
	}
	for i := range this.GroupMemberIDs {
		if !bytes.Equal(this.GroupMemberIDs[i], that1.GroupMemberIDs[i]) {
			return false
		}
	}
	if this.DishonestThreshold != that1.DishonestThreshold {
		return false
	}
	return true
}
func (this *LocalPartySaveData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalPartySaveData)
	if !ok {
		that2, ok := that.(LocalPartySaveData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalPreParams.Equal(that1.LocalPreParams) {
		return false
	}
	if !this.LocalSecrets.Equal(that1.LocalSecrets) {
		return false
	}
	if len(this.Ks) != len(that1.Ks) {
		return false
	}
	for i := range this.Ks {
		if !bytes.Equal(this.Ks[i], that1.Ks[i]) {
			return false
		}
	}
	if len(this.NTildej) != len(that1.NTildej) {
		return false
	}
	for i := range this.NTildej {
		if !bytes.Equal(this.NTildej[i], that1.NTildej[i]) {
			return false
		}
	}
	if len(this.H1J) != len(that1.H1J) {
		return false
	}
	for i := range this.H1J {
		if !bytes.Equal(this.H1J[i], that1.H1J[i]) {
			return false
		}
	}
	if len(this.H2J) != len(that1.H2J) {
		return false
	}
	for i := range this.H2J {
		if !bytes.Equal(this.H2J[i], that1.H2J[i]) {
			return false
		}
	}
	if len(this.BigXj) != len(that1.BigXj) {
		return false
	}
	for i := range this.BigXj {
		if !this.BigXj[i].Equal(that1.BigXj[i]) {
			return false
		}
	}
	if len(this.PaillierPKs) != len(that1.PaillierPKs) {
		return false
	}
	for i := range this.PaillierPKs {
		if !bytes.Equal(this.PaillierPKs[i], that1.PaillierPKs[i]) {
			return false
		}
	}
	if !this.EcdsaPub.Equal(that1.EcdsaPub) {
		return false
	}
	return true
}
func (this *LocalPartySaveData_LocalPreParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalPartySaveData_LocalPreParams)
	if !ok {
		that2, ok := that.(LocalPartySaveData_LocalPreParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaillierSK.Equal(that1.PaillierSK) {
		return false
	}
	if !bytes.Equal(this.NTilde, that1.NTilde) {
		return false
	}
	if !bytes.Equal(this.H1I, that1.H1I) {
		return false
	}
	if !bytes.Equal(this.H2I, that1.H2I) {
		return false
	}
	if !bytes.Equal(this.Alpha, that1.Alpha) {
		return false
	}
	if !bytes.Equal(this.Beta, that1.Beta) {
		return false
	}
	if !bytes.Equal(this.P, that1.P) {
		return false
	}
	if !bytes.Equal(this.Q, that1.Q) {
		return false
	}
	return true
}
func (this *LocalPartySaveData_LocalPreParams_PrivateKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalPartySaveData_LocalPreParams_PrivateKey)
	if !ok {
		that2, ok := that.(LocalPartySaveData_LocalPreParams_PrivateKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.LambdaN, that1.LambdaN) {
		return false
	}
	if !bytes.Equal(this.PhiN, that1.PhiN) {
		return false
	}
	return true
}
func (this *LocalPartySaveData_LocalSecrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalPartySaveData_LocalSecrets)
	if !ok {
		that2, ok := that.(LocalPartySaveData_LocalSecrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Xi, that1.Xi) {
		return false
	}
	if !bytes.Equal(this.ShareID, that1.ShareID) {
		return false
	}
	return true
}
func (this *LocalPartySaveData_ECPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalPartySaveData_ECPoint)
	if !ok {
		that2, ok := that.(LocalPartySaveData_ECPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.X, that1.X) {
		return false
	}
	if !bytes.Equal(this.Y, that1.Y) {
		return false
	}
	return true
}
func (this *ThresholdSigner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ThresholdSigner{")
	if this.GroupInfo != nil {
		s = append(s, "GroupInfo: "+fmt.Sprintf("%#v", this.GroupInfo)+",\n")
	}
	s = append(s, "ThresholdKey: "+fmt.Sprintf("%#v", this.ThresholdKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThresholdSigner_GroupInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ThresholdSigner_GroupInfo{")
	s = append(s, "GroupID: "+fmt.Sprintf("%#v", this.GroupID)+",\n")
	s = append(s, "MemberID: "+fmt.Sprintf("%#v", this.MemberID)+",\n")
	s = append(s, "GroupMemberIDs: "+fmt.Sprintf("%#v", this.GroupMemberIDs)+",\n")
	s = append(s, "DishonestThreshold: "+fmt.Sprintf("%#v", this.DishonestThreshold)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalPartySaveData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.LocalPartySaveData{")
	if this.LocalPreParams != nil {
		s = append(s, "LocalPreParams: "+fmt.Sprintf("%#v", this.LocalPreParams)+",\n")
	}
	if this.LocalSecrets != nil {
		s = append(s, "LocalSecrets: "+fmt.Sprintf("%#v", this.LocalSecrets)+",\n")
	}
	s = append(s, "Ks: "+fmt.Sprintf("%#v", this.Ks)+",\n")
	s = append(s, "NTildej: "+fmt.Sprintf("%#v", this.NTildej)+",\n")
	s = append(s, "H1J: "+fmt.Sprintf("%#v", this.H1J)+",\n")
	s = append(s, "H2J: "+fmt.Sprintf("%#v", this.H2J)+",\n")
	if this.BigXj != nil {
		s = append(s, "BigXj: "+fmt.Sprintf("%#v", this.BigXj)+",\n")
	}
	s = append(s, "PaillierPKs: "+fmt.Sprintf("%#v", this.PaillierPKs)+",\n")
	if this.EcdsaPub != nil {
		s = append(s, "EcdsaPub: "+fmt.Sprintf("%#v", this.EcdsaPub)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalPartySaveData_LocalPreParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.LocalPartySaveData_LocalPreParams{")
	if this.PaillierSK != nil {
		s = append(s, "PaillierSK: "+fmt.Sprintf("%#v", this.PaillierSK)+",\n")
	}
	s = append(s, "NTilde: "+fmt.Sprintf("%#v", this.NTilde)+",\n")
	s = append(s, "H1I: "+fmt.Sprintf("%#v", this.H1I)+",\n")
	s = append(s, "H2I: "+fmt.Sprintf("%#v", this.H2I)+",\n")
	s = append(s, "Alpha: "+fmt.Sprintf("%#v", this.Alpha)+",\n")
	s = append(s, "Beta: "+fmt.Sprintf("%#v", this.Beta)+",\n")
	s = append(s, "P: "+fmt.Sprintf("%#v", this.P)+",\n")
	s = append(s, "Q: "+fmt.Sprintf("%#v", this.Q)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalPartySaveData_LocalPreParams_PrivateKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LocalPartySaveData_LocalPreParams_PrivateKey{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "LambdaN: "+fmt.Sprintf("%#v", this.LambdaN)+",\n")
	s = append(s, "PhiN: "+fmt.Sprintf("%#v", this.PhiN)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalPartySaveData_LocalSecrets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LocalPartySaveData_LocalSecrets{")
	s = append(s, "Xi: "+fmt.Sprintf("%#v", this.Xi)+",\n")
	s = append(s, "ShareID: "+fmt.Sprintf("%#v", this.ShareID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalPartySaveData_ECPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LocalPartySaveData_ECPoint{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSigner(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ThresholdSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThresholdSigner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.GroupInfo.Size()))
		n1, err := m.GroupInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ThresholdKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.ThresholdKey)))
		i += copy(dAtA[i:], m.ThresholdKey)
	}
	return i, nil
}

func (m *ThresholdSigner_GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThresholdSigner_GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.GroupID)))
		i += copy(dAtA[i:], m.GroupID)
	}
	if len(m.MemberID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.MemberID)))
		i += copy(dAtA[i:], m.MemberID)
	}
	if len(m.GroupMemberIDs) > 0 {
		for _, b := range m.GroupMemberIDs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.DishonestThreshold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.DishonestThreshold))
	}
	return i, nil
}

func (m *LocalPartySaveData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalPartySaveData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalPreParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.LocalPreParams.Size()))
		n2, err := m.LocalPreParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LocalSecrets != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.LocalSecrets.Size()))
		n3, err := m.LocalSecrets.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Ks) > 0 {
		for _, b := range m.Ks {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NTildej) > 0 {
		for _, b := range m.NTildej {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.H1J) > 0 {
		for _, b := range m.H1J {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.H2J) > 0 {
		for _, b := range m.H2J {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BigXj) > 0 {
		for _, msg := range m.BigXj {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSigner(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PaillierPKs) > 0 {
		for _, b := range m.PaillierPKs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSigner(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.EcdsaPub != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.EcdsaPub.Size()))
		n4, err := m.EcdsaPub.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *LocalPartySaveData_LocalPreParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalPartySaveData_LocalPreParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PaillierSK != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(m.PaillierSK.Size()))
		n5, err := m.PaillierSK.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.NTilde) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.NTilde)))
		i += copy(dAtA[i:], m.NTilde)
	}
	if len(m.H1I) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.H1I)))
		i += copy(dAtA[i:], m.H1I)
	}
	if len(m.H2I) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.H2I)))
		i += copy(dAtA[i:], m.H2I)
	}
	if len(m.Alpha) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.Alpha)))
		i += copy(dAtA[i:], m.Alpha)
	}
	if len(m.Beta) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.Beta)))
		i += copy(dAtA[i:], m.Beta)
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	return i, nil
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.LambdaN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.LambdaN)))
		i += copy(dAtA[i:], m.LambdaN)
	}
	if len(m.PhiN) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.PhiN)))
		i += copy(dAtA[i:], m.PhiN)
	}
	return i, nil
}

func (m *LocalPartySaveData_LocalSecrets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalPartySaveData_LocalSecrets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Xi) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.Xi)))
		i += copy(dAtA[i:], m.Xi)
	}
	if len(m.ShareID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.ShareID)))
		i += copy(dAtA[i:], m.ShareID)
	}
	return i, nil
}

func (m *LocalPartySaveData_ECPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalPartySaveData_ECPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.X) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.X)))
		i += copy(dAtA[i:], m.X)
	}
	if len(m.Y) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSigner(dAtA, i, uint64(len(m.Y)))
		i += copy(dAtA[i:], m.Y)
	}
	return i, nil
}

func encodeVarintSigner(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ThresholdSigner) Size() (n int) {
	var l int
	_ = l
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.ThresholdKey)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func (m *ThresholdSigner_GroupInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.MemberID)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	if len(m.GroupMemberIDs) > 0 {
		for _, b := range m.GroupMemberIDs {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if m.DishonestThreshold != 0 {
		n += 1 + sovSigner(uint64(m.DishonestThreshold))
	}
	return n
}

func (m *LocalPartySaveData) Size() (n int) {
	var l int
	_ = l
	if m.LocalPreParams != nil {
		l = m.LocalPreParams.Size()
		n += 1 + l + sovSigner(uint64(l))
	}
	if m.LocalSecrets != nil {
		l = m.LocalSecrets.Size()
		n += 1 + l + sovSigner(uint64(l))
	}
	if len(m.Ks) > 0 {
		for _, b := range m.Ks {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if len(m.NTildej) > 0 {
		for _, b := range m.NTildej {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if len(m.H1J) > 0 {
		for _, b := range m.H1J {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if len(m.H2J) > 0 {
		for _, b := range m.H2J {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if len(m.BigXj) > 0 {
		for _, e := range m.BigXj {
			l = e.Size()
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if len(m.PaillierPKs) > 0 {
		for _, b := range m.PaillierPKs {
			l = len(b)
			n += 1 + l + sovSigner(uint64(l))
		}
	}
	if m.EcdsaPub != nil {
		l = m.EcdsaPub.Size()
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func (m *LocalPartySaveData_LocalPreParams) Size() (n int) {
	var l int
	_ = l
	if m.PaillierSK != nil {
		l = m.PaillierSK.Size()
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.NTilde)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.H1I)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.H2I)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.Alpha)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.Beta)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func (m *LocalPartySaveData_LocalPreParams_PrivateKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.LambdaN)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.PhiN)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func (m *LocalPartySaveData_LocalSecrets) Size() (n int) {
	var l int
	_ = l
	l = len(m.Xi)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.ShareID)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func (m *LocalPartySaveData_ECPoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.X)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	l = len(m.Y)
	if l > 0 {
		n += 1 + l + sovSigner(uint64(l))
	}
	return n
}

func sovSigner(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSigner(x uint64) (n int) {
	return sovSigner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ThresholdSigner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThresholdSigner{`,
		`GroupInfo:` + strings.Replace(fmt.Sprintf("%v", this.GroupInfo), "ThresholdSigner_GroupInfo", "ThresholdSigner_GroupInfo", 1) + `,`,
		`ThresholdKey:` + fmt.Sprintf("%v", this.ThresholdKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThresholdSigner_GroupInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThresholdSigner_GroupInfo{`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`MemberID:` + fmt.Sprintf("%v", this.MemberID) + `,`,
		`GroupMemberIDs:` + fmt.Sprintf("%v", this.GroupMemberIDs) + `,`,
		`DishonestThreshold:` + fmt.Sprintf("%v", this.DishonestThreshold) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalPartySaveData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalPartySaveData{`,
		`LocalPreParams:` + strings.Replace(fmt.Sprintf("%v", this.LocalPreParams), "LocalPartySaveData_LocalPreParams", "LocalPartySaveData_LocalPreParams", 1) + `,`,
		`LocalSecrets:` + strings.Replace(fmt.Sprintf("%v", this.LocalSecrets), "LocalPartySaveData_LocalSecrets", "LocalPartySaveData_LocalSecrets", 1) + `,`,
		`Ks:` + fmt.Sprintf("%v", this.Ks) + `,`,
		`NTildej:` + fmt.Sprintf("%v", this.NTildej) + `,`,
		`H1J:` + fmt.Sprintf("%v", this.H1J) + `,`,
		`H2J:` + fmt.Sprintf("%v", this.H2J) + `,`,
		`BigXj:` + strings.Replace(fmt.Sprintf("%v", this.BigXj), "LocalPartySaveData_ECPoint", "LocalPartySaveData_ECPoint", 1) + `,`,
		`PaillierPKs:` + fmt.Sprintf("%v", this.PaillierPKs) + `,`,
		`EcdsaPub:` + strings.Replace(fmt.Sprintf("%v", this.EcdsaPub), "LocalPartySaveData_ECPoint", "LocalPartySaveData_ECPoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalPartySaveData_LocalPreParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalPartySaveData_LocalPreParams{`,
		`PaillierSK:` + strings.Replace(fmt.Sprintf("%v", this.PaillierSK), "LocalPartySaveData_LocalPreParams_PrivateKey", "LocalPartySaveData_LocalPreParams_PrivateKey", 1) + `,`,
		`NTilde:` + fmt.Sprintf("%v", this.NTilde) + `,`,
		`H1I:` + fmt.Sprintf("%v", this.H1I) + `,`,
		`H2I:` + fmt.Sprintf("%v", this.H2I) + `,`,
		`Alpha:` + fmt.Sprintf("%v", this.Alpha) + `,`,
		`Beta:` + fmt.Sprintf("%v", this.Beta) + `,`,
		`P:` + fmt.Sprintf("%v", this.P) + `,`,
		`Q:` + fmt.Sprintf("%v", this.Q) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalPartySaveData_LocalPreParams_PrivateKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalPartySaveData_LocalPreParams_PrivateKey{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`LambdaN:` + fmt.Sprintf("%v", this.LambdaN) + `,`,
		`PhiN:` + fmt.Sprintf("%v", this.PhiN) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalPartySaveData_LocalSecrets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalPartySaveData_LocalSecrets{`,
		`Xi:` + fmt.Sprintf("%v", this.Xi) + `,`,
		`ShareID:` + fmt.Sprintf("%v", this.ShareID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalPartySaveData_ECPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalPartySaveData_ECPoint{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSigner(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ThresholdSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThresholdSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThresholdSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &ThresholdSigner_GroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThresholdKey = append(m.ThresholdKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ThresholdKey == nil {
				m.ThresholdKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThresholdSigner_GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberID = append(m.MemberID[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberID == nil {
				m.MemberID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMemberIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMemberIDs = append(m.GroupMemberIDs, make([]byte, postIndex-iNdEx))
			copy(m.GroupMemberIDs[len(m.GroupMemberIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishonestThreshold", wireType)
			}
			m.DishonestThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DishonestThreshold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalPartySaveData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalPartySaveData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalPartySaveData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPreParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalPreParams == nil {
				m.LocalPreParams = &LocalPartySaveData_LocalPreParams{}
			}
			if err := m.LocalPreParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalSecrets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalSecrets == nil {
				m.LocalSecrets = &LocalPartySaveData_LocalSecrets{}
			}
			if err := m.LocalSecrets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ks = append(m.Ks, make([]byte, postIndex-iNdEx))
			copy(m.Ks[len(m.Ks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTildej", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTildej = append(m.NTildej, make([]byte, postIndex-iNdEx))
			copy(m.NTildej[len(m.NTildej)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H1J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H1J = append(m.H1J, make([]byte, postIndex-iNdEx))
			copy(m.H1J[len(m.H1J)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H2J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H2J = append(m.H2J, make([]byte, postIndex-iNdEx))
			copy(m.H2J[len(m.H2J)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigXj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigXj = append(m.BigXj, &LocalPartySaveData_ECPoint{})
			if err := m.BigXj[len(m.BigXj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaillierPKs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaillierPKs = append(m.PaillierPKs, make([]byte, postIndex-iNdEx))
			copy(m.PaillierPKs[len(m.PaillierPKs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaPub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcdsaPub == nil {
				m.EcdsaPub = &LocalPartySaveData_ECPoint{}
			}
			if err := m.EcdsaPub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalPartySaveData_LocalPreParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalPreParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalPreParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaillierSK", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaillierSK == nil {
				m.PaillierSK = &LocalPartySaveData_LocalPreParams_PrivateKey{}
			}
			if err := m.PaillierSK.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTilde", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTilde = append(m.NTilde[:0], dAtA[iNdEx:postIndex]...)
			if m.NTilde == nil {
				m.NTilde = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H1I", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H1I = append(m.H1I[:0], dAtA[iNdEx:postIndex]...)
			if m.H1I == nil {
				m.H1I = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H2I", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H2I = append(m.H2I[:0], dAtA[iNdEx:postIndex]...)
			if m.H2I == nil {
				m.H2I = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alpha = append(m.Alpha[:0], dAtA[iNdEx:postIndex]...)
			if m.Alpha == nil {
				m.Alpha = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beta = append(m.Beta[:0], dAtA[iNdEx:postIndex]...)
			if m.Beta == nil {
				m.Beta = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = append(m.Q[:0], dAtA[iNdEx:postIndex]...)
			if m.Q == nil {
				m.Q = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalPartySaveData_LocalPreParams_PrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LambdaN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LambdaN = append(m.LambdaN[:0], dAtA[iNdEx:postIndex]...)
			if m.LambdaN == nil {
				m.LambdaN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhiN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhiN = append(m.PhiN[:0], dAtA[iNdEx:postIndex]...)
			if m.PhiN == nil {
				m.PhiN = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalPartySaveData_LocalSecrets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSecrets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSecrets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xi = append(m.Xi[:0], dAtA[iNdEx:postIndex]...)
			if m.Xi == nil {
				m.Xi = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareID = append(m.ShareID[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareID == nil {
				m.ShareID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalPartySaveData_ECPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = append(m.X[:0], dAtA[iNdEx:postIndex]...)
			if m.X == nil {
				m.X = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = append(m.Y[:0], dAtA[iNdEx:postIndex]...)
			if m.Y == nil {
				m.Y = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSigner
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSigner
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSigner(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSigner = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigner   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/signer.proto", fileDescriptorSigner) }

var fileDescriptorSigner = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x74, 0xfd, 0xf5, 0x5a, 0x75, 0xc8, 0x42, 0xc8, 0xaa, 0x90, 0x89, 0x26, 0x98,
	0x7a, 0x0a, 0xac, 0x08, 0x09, 0x09, 0x4e, 0x30, 0x04, 0x53, 0xc7, 0x14, 0xd2, 0x1d, 0x26, 0x6e,
	0x4e, 0x6b, 0x16, 0x77, 0x69, 0x93, 0xd9, 0xd9, 0xd4, 0xde, 0xf8, 0x0f, 0xe0, 0xca, 0x7f, 0xc0,
	0x3f, 0xc0, 0x99, 0x2b, 0xc7, 0x1d, 0x39, 0xb2, 0x70, 0xe1, 0xb8, 0x3f, 0x01, 0xc5, 0x71, 0xba,
	0xb5, 0xfc, 0xbc, 0xf9, 0xfb, 0xc9, 0x7b, 0xcf, 0xcf, 0xdf, 0x67, 0x07, 0xd6, 0x63, 0xff, 0xae,
	0x12, 0x87, 0x53, 0x2e, 0x9d, 0x58, 0x46, 0x49, 0x84, 0xcb, 0x89, 0x52, 0x1b, 0xef, 0x2c, 0x58,
	0xdf, 0x0f, 0x24, 0x57, 0x41, 0x14, 0x8e, 0x06, 0xfa, 0x33, 0x7e, 0x0c, 0x8d, 0x43, 0x19, 0x9d,
	0xc4, 0x3b, 0xd3, 0x37, 0x11, 0x41, 0x36, 0xea, 0x36, 0x7b, 0xd4, 0x49, 0x94, 0x72, 0x56, 0x02,
	0x9d, 0xe7, 0x45, 0x94, 0x77, 0x99, 0x80, 0x37, 0xa0, 0x95, 0x14, 0x71, 0x7d, 0x3e, 0x27, 0x96,
	0x8d, 0xba, 0x2d, 0x6f, 0x89, 0x75, 0x3e, 0x20, 0x68, 0x2c, 0x92, 0x31, 0x81, 0x5a, 0x9e, 0xbe,
	0xad, 0x77, 0x6b, 0x78, 0x85, 0xc4, 0x1d, 0xa8, 0x4f, 0xf8, 0xc4, 0xe7, 0x72, 0x67, 0xdb, 0xd4,
	0x59, 0x68, 0xbc, 0x09, 0x6d, 0x1d, 0xf6, 0xd2, 0x00, 0x45, 0xca, 0x76, 0xb9, 0xdb, 0xf2, 0x56,
	0x28, 0x76, 0x00, 0x8f, 0x84, 0x0a, 0xa2, 0x29, 0x57, 0xc9, 0xe2, 0x00, 0x64, 0xcd, 0x46, 0xdd,
	0x8a, 0xf7, 0x9b, 0x2f, 0x1b, 0x9f, 0xaa, 0x80, 0x77, 0xa3, 0x21, 0x0b, 0x5d, 0x26, 0x93, 0xf9,
	0x80, 0x9d, 0xf2, 0x6d, 0x96, 0x30, 0xbc, 0x07, 0xed, 0x50, 0x53, 0xc9, 0x5d, 0x26, 0xd9, 0x44,
	0x19, 0x67, 0x36, 0xb5, 0x33, 0xbf, 0x26, 0x18, 0x54, 0x44, 0x7b, 0x2b, 0xd9, 0xf8, 0x05, 0xb4,
	0x34, 0x19, 0xf0, 0xa1, 0xe4, 0x89, 0xd2, 0xc7, 0x6b, 0xf6, 0x6e, 0xff, 0xb5, 0x9a, 0x89, 0xf5,
	0x96, 0x32, 0x71, 0x1b, 0xac, 0xa3, 0xe2, 0xf0, 0xd6, 0x91, 0xca, 0xec, 0x9c, 0xee, 0x8b, 0x70,
	0xc4, 0xc7, 0x64, 0x4d, 0xc3, 0x42, 0xe2, 0x6b, 0x50, 0x0e, 0xb6, 0xc6, 0xa4, 0xa2, 0x69, 0xb6,
	0xd4, 0xa4, 0x37, 0x26, 0x55, 0x43, 0x7a, 0x63, 0xfc, 0x00, 0x2a, 0xbe, 0x38, 0x3c, 0x18, 0x93,
	0x9a, 0x5d, 0xee, 0x36, 0x7b, 0xb7, 0xfe, 0xd4, 0xd0, 0xb3, 0xa7, 0x6e, 0x24, 0xa6, 0x89, 0x97,
	0x47, 0x63, 0x1b, 0x9a, 0x31, 0x13, 0x61, 0x28, 0xb8, 0x74, 0xfb, 0x8a, 0xd4, 0x75, 0xc1, 0xab,
	0x08, 0x3f, 0x82, 0x3a, 0x1f, 0x8e, 0x14, 0x73, 0x4f, 0x7c, 0xd2, 0xd0, 0x87, 0xfd, 0x67, 0xed,
	0x45, 0x42, 0xe7, 0xb3, 0x05, 0xed, 0x65, 0x43, 0xf1, 0x2b, 0x80, 0xa2, 0xfc, 0xa0, 0x6f, 0x86,
	0xb1, 0xf5, 0x7f, 0xc3, 0x70, 0x5c, 0x29, 0x4e, 0x59, 0xc2, 0xfb, 0x7c, 0xee, 0x5d, 0x29, 0x82,
	0x6f, 0x40, 0x35, 0xb7, 0xca, 0x5c, 0x36, 0xa3, 0x72, 0xdf, 0x04, 0x29, 0x6b, 0x98, 0x2d, 0x73,
	0xdf, 0x84, 0xbe, 0x45, 0xda, 0x37, 0x81, 0xaf, 0x43, 0x85, 0x85, 0x71, 0xc0, 0x48, 0x45, 0xb3,
	0x5c, 0x60, 0x0c, 0x6b, 0x3e, 0x4f, 0x18, 0xa9, 0x6a, 0xa8, 0xd7, 0xb8, 0x05, 0x28, 0x26, 0x35,
	0x0d, 0x50, 0x9c, 0xa9, 0x63, 0x52, 0xcf, 0xd5, 0x71, 0xe7, 0x00, 0xe0, 0xb2, 0x37, 0x7c, 0x13,
	0x1a, 0xf1, 0x89, 0x1f, 0x8a, 0x61, 0xf6, 0x8e, 0x90, 0x8e, 0xb9, 0x04, 0xd9, 0x9c, 0x43, 0x36,
	0xf1, 0x47, 0x6c, 0xcf, 0xb4, 0x5b, 0xc8, 0x6c, 0xd7, 0x38, 0x10, 0x7b, 0xa6, 0x61, 0xbd, 0xee,
	0x3c, 0x84, 0xd6, 0xee, 0xca, 0xad, 0x99, 0x09, 0x53, 0xd4, 0x9a, 0x89, 0xac, 0x9a, 0x0a, 0x98,
	0xe4, 0x8b, 0x97, 0x56, 0xc8, 0xce, 0x1d, 0xa8, 0x99, 0x81, 0x64, 0xcd, 0xce, 0x4c, 0x0e, 0x9a,
	0x65, 0xaa, 0x78, 0xde, 0x68, 0xfe, 0xe4, 0xde, 0xd9, 0x39, 0x2d, 0x7d, 0x3d, 0xa7, 0xa5, 0x8b,
	0x73, 0x8a, 0xde, 0xa6, 0x14, 0x7d, 0x4c, 0x29, 0xfa, 0x92, 0x52, 0x74, 0x96, 0x52, 0xf4, 0x2d,
	0xa5, 0xe8, 0x47, 0x4a, 0x4b, 0x17, 0x29, 0x45, 0xef, 0xbf, 0xd3, 0xd2, 0x6b, 0x2b, 0xf6, 0xfd,
	0xaa, 0xfe, 0x0f, 0xdd, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0x12, 0x99, 0x4d, 0xab, 0x9a, 0x04,
	0x00, 0x00,
}
